%{
    #include "hw3_output.hpp"
    #include "parser_utils.hpp"
    #include "types.hpp"
    extern int yylex();
    extern int yylineno;
    void yyerror(const char*);
%}

%nonassoc VOID
%nonassoc INT
%nonassoc BYTE
%nonassoc B
%nonassoc BOOL
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc IF
%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc SC
%nonassoc COMMA
%nonassoc ID
%nonassoc AUTO
%nonassoc NUM
%nonassoc STRING
%right ASSIGN
%left OR
%left AND
%left EQUALITY
%nonassoc RELATIONAL
%left ADDITIVE
%left MULTIPLICATIVE
%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%right ELSE

%%

Program    :    Funcs            { /* not supposed to do anything */ }
           ;

Funcs      :    /*epsilon*/      { /* not supposed to do anything */ }
           |    FuncDecl Funcs   { /* not supposed to do anything */ }
           ;

FuncDecl   :    FuncSignature LBRACE Statements RBRACE PopScope  { /* not supposed to do anything */ }
           ;

FuncSignature : RetType ID LPAREN Formals RPAREN  { $$ = Parser::instance().deriveFuncSignature($1, $2, $4, yylineno); }
           ;

RetType    :    Type             { $$ = $1; }
           |    VOID             { $$ = $1; }
           ;

Formals    :    /*epsilon*/      { $$ = Parser::instance().deriveFormals(); }
           |    FormalsList      { $$ = Parser::instance().deriveFormals($1); }
           ;

FormalsList:    FormalDecl       { $$ = Parser::instance().deriveFormalsList($1); }
           |    FormalDecl COMMA FormalsList  { $$ = Parser::instance().deriveFormalsList($1, $3); }
           ;

FormalDecl :    Type ID          { $$ = Parser::instance().deriveFormalDecl($1, $2, yylineno); }
           ;

Statements :    Statement             { /* not supposed to do anything */ }
           |    Statements Statement  { /* not supposed to do anything */ }
           ;

Statement  :    PushScope LBRACE Statements RBRACE PopScope  { /* not supposed to do anything */ }
           |    Type ID SC                { Parser::instance().deriveStatement($1, $2, yylineno); }
           |    Type ID ASSIGN Exp SC     { Parser::instance().deriveDeclaration($1, $2, $4, yylineno); }
           |    AUTO ID ASSIGN Exp SC     { Parser::instance().deriveDeclaration(nullptr, $2, $4, yylineno); }
           |    ID ASSIGN Exp SC          { Parser::instance().deriveAssignment($1, $3, yylineno); }
           |    Call SC                   { /* not supposed to do anything */ }
           |    RETURN SC                 { Parser::instance().deriveReturnVoid(yylineno); }
           |    RETURN Exp SC             { Parser::instance().deriveReturnExp($2, yylineno); }
           |    IF LPAREN Exp IsBool RPAREN PushScope Statement PopScope  { /* not supposed to do anything */ }
           |    IF LPAREN Exp IsBool RPAREN PushScope Statement PopScope ELSE PushScope Statement PopScope  { /* not supposed to do anything */ }
           |    WHILE LPAREN Exp IsBool RPAREN PushWhileScope Statement PopScope  { /* not supposed to do anything */ }
           |    BREAK SC                   { Parser::instance().deriveBreak(yylineno); }
           |    CONTINUE SC                { Parser::instance().deriveContinue(yylineno); }
           ;

Call       :    ID LPAREN ExpList RPAREN    { $$ = Parser::instance().deriveCall(yylineno, $1, $3); }
           |    ID LPAREN RPAREN            { $$ = Parser::instance().deriveCall(yylineno, $1); }
           ;

ExpList    :    Exp                         { $$ = Parser::instance().deriveExpList($1); }
           |    Exp COMMA ExpList           { $$ = Parser::instance().deriveExpList($1, $3); }
           ;

Type       :    INT                         { $$ = $1; }
           |    BYTE                        { $$ = $1; }
           |    BOOL                        { $$ = $1; }
           ;

Exp        :    LPAREN Exp RPAREN            { $$ = $2; }
           |    Exp MULTIPLICATIVE Exp       { $$ = Parser::instance().deriveBinop($1, $3, yylineno); }
           |    Exp ADDITIVE Exp             { $$ = Parser::instance().deriveBinop($1, $3, yylineno); }
           |    ID                           { $$ = Parser::instance().deriveId($1, yylineno); }
           |    Call                         { $$ = $1; }
           |    NUM                          { $$ = $1; }
           |    NUM B                        { $$ = Parser::instance().deriveNumB($1, yylineno); }
           |    STRING                       { $$ = $1; }
           |    TRUE                         { $$ = $1; }
           |    FALSE                        { $$ = $1; }
           |    NOT Exp                      { $$ = Parser::instance().deriveNot($2, yylineno); }
           |    Exp AND Exp                  { $$ = Parser::instance().deriveAndOr($1, $3, yylineno); }
           |    Exp OR Exp                   { $$ = Parser::instance().deriveAndOr($1, $3, yylineno); }
           |    Exp EQUALITY Exp             { $$ = Parser::instance().deriveRelop($1, $3, yylineno); }
           |    Exp RELATIONAL Exp           { $$ = Parser::instance().deriveRelop($1, $3, yylineno); }
           |    LPAREN Type RPAREN Exp       { $$ = Parser::instance().deriveCast($2, $4, yylineno); }
           ;

/* Markers */
PushScope  :    /*epsilon*/                  { Parser::instance().pushScope(); }
           ;

PushWhileScope  :    /*epsilon*/                  { Parser::instance().pushScope(true); }
           ;

PopScope   :    /*epsilon*/                  { Parser::instance().popScope(); }
           ;

IsBool     :    /*epsilon*/                  { Parser::instance().deriveBool($0, yylineno); }
           ;

%%

int main() {
	int parseValue = yyparse();
    Parser::instance().deriveProgram();
	return parseValue;
}

void yyerror(const char* message) {
	output::errorSyn(yylineno);
	exit(0);
}
